package main

import (
	"testing"

	log "github.com/ngaut/logging"
)

func {{ .SuitName }}Setup() {
    log.Info("setup suit: {{ .SuitName}}")
    if isTblExists(`{{ .TableName }}`) {
        mustExec(MysqlDB, `DROP TABLE {{ .TableName }};`)
	}
    mustExec(MysqlDB,`CREATE TABLE {{ .TableName }} (id {{ .DataType }}, UNIQUE KEY(id), data {{ .DataType }});`)
	reloadConfig()
}

func {{ .SuitName }}TearDown() {
    log.Info("tear down suit: {{ .SuitName }}")
    mustExec(MysqlDB, `DROP TABLE {{ .TableName }};`)
}

func {{ .SuitName }}TestInsert(t *testing.T) {
    mustExec(ProxyDB, "insert into "+`{{ .TableName }}`+" (id, data) values (?, ?)", {{ .Id }}, {{ .Data }})

    var data {{ .DataTypeGo }}
    mustQueryData(ProxyDB, `{{ .TableName }}`, {{ .Id }}, &data)
    if !equal(data, {{ .Data }}) {
        t.Error("data != ", {{ .Data }}, " return", data)
		return
	}
}

func {{ .SuitName }}TestSelect(t *testing.T) {
    var data {{ .DataTypeGo }}
    mustQueryData(ProxyDB, `{{ .TableName }}`, {{ .Id }}, &data)
	if !equal(data, {{ .Data }}) {
		t.Error("data != ", {{ .Data }}, " return", data)
		return
	}
}

func {{ .SuitName }}TestUpdate(t *testing.T) {
    res := mustExec(ProxyDB, "update "+`{{ .TableName }}`+" set data=? where id=?", {{ .DataUpdated }}, {{ .Id }})
	affected, _ := res.RowsAffected()
	if affected != 1 {
		t.Error("affected rows not equals to 1, return", affected)
		return
	}
    var data {{ .DataTypeGo }}
    mustQueryData(ProxyDB, `{{ .TableName }}`, {{ .Id }}, &data)
	if !equal(data, {{ .DataUpdated }}) {
		t.Error("data != ", {{ .DataUpdated }} ," return", data)
		return
	}
}

func {{ .SuitName }}TestDelete(t *testing.T) {
}

func TestAll{{ .SuitName }}(t *testing.T) {
    {{ .SuitName }}Setup()
    defer {{ .SuitName }}TearDown()
    {{ .SuitName }}TestInsert(t)
	{{ .SuitName }}TestSelect(t)
	{{ .SuitName }}TestSelect(t)
	{{ .SuitName }}TestUpdate(t)
	{{ .SuitName }}TestDelete(t)
}
